// const bot = new Telegraf('');
// bot.start(ctx => ctx.reply(`
// Hi, I'm a simple bot (please write /help)
// `))
// bot.help(ctx => ctx.reply(`
//    Hello world!
// `))

const BOT_TOKEN = '2055901371:AAHPHXZe7td2vUYhVsFOmP4iB6f95kkEaZk';
const CHANEL_ID = -1001648324188;
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

export default async (req, res) => {
    const { method, body } = req;
    switch (method) {
        case 'POST':
            try {
                const organization = body.organization;
                const name = body.name;
                const note = body.note;
                const contact = body.contact;
                const phone = body.phone;
                const selected = body.selected.map(item => item.title);

                const message = `<strong>–ù–æ–≤—ã–π –∂–µ–ª–∞—é—â–∏–π</strong>\nüèõ<strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: </strong>${organization}\nüë¶<strong>–ò–º—è —á–µ–ª–æ–≤–µ–∫–∞: </strong>${name}\nüì±<strong>–ö–æ–Ω—Ç–∞–∫—Ç: </strong>${contact}\nüìû<strong>–ö–æ–Ω—Ç–∞–∫—Ç: </strong>${phone}\nüìÑ<strong>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏: </strong>${selected}\nüí¨ <strong>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: </strong>${note || '–ù–µ—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                const text = encodeURIComponent(message);
                const url = `${TELEGRAM_API}?chat_id=${CHANEL_ID}&text=${text}&parse_mode=HTML`;

                const response = await fetch(url);
                const data = await response.json();

                if (data.ok === true) {
                    res.status(200).json({ statusCode: 200 });
                } else {
                    res.status(400).json({ statusCode: 400, message: '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...' });
                }
            } catch (error) {
                res.status(400).json({ statusCode: 400, message: '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...' });
            }
            break;
        default:
            res.status(400).json({ statusCode: 400, message: '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...' });
            break;
    }
}